# Patch generated by Pyment v0.4.0dev

--- a/abfahrt\Input.py
+++ b/abfahrt\Input.py
@@ -9,6 +9,7 @@
 
 
 class Input:
+    """ """
     star_station = Station(id=-1, capacity=999)   # the "*" station
     Stations: List["Station"] = []
     Lines: List["Line"] = []
@@ -16,9 +17,16 @@
     Passengers: List["Passenger"] = []
 
     def get_star_station(self):
+        """ """
         return self.star_station
 
     def find_station(self, id) -> Station:
+        """
+
+        :param id: 
+        :rtype: Station
+
+        """
         # station may be none, if input is *
         find = list(filter(lambda t: t.id == id, self.Stations))
         if(len(find) > 0):
@@ -31,6 +39,12 @@
             return None
 
     def find_line(self, id) -> Line:
+        """
+
+        :param id: 
+        :rtype: Line
+
+        """
         find = list(filter(lambda t: t.id == id, self.Lines))
         if(len(find) > 0):
             return find[0]  # assume there are no duplications
@@ -38,6 +52,12 @@
             return None
 
     def find_train(self, id) -> Train:
+        """
+
+        :param id: 
+        :rtype: Train
+
+        """
         find = list(filter(lambda t: t.id == id, self.Trains))
         if(len(find) > 0):
             return find[0]  # assume there are no duplications
@@ -45,6 +65,12 @@
             return None
 
     def find_passenger(self, id) -> Passenger:
+        """
+
+        :param id: 
+        :rtype: Passenger
+
+        """
         find = list(filter(lambda t: t.id == id, self.Passengers))
         if(len(find) > 0):
             return find[0]  # assume there are no duplications
@@ -56,6 +82,14 @@
     # check duplication
 
     def add_station(self, id: str, capacity: str):
+        """
+
+        :param id: 
+        :type id: str
+        :param capacity: 
+        :type capacity: str
+
+        """
         # station: int(ID), int capacity
         id = _string_to_int(id)
         station = self.find_station(id)
@@ -66,6 +100,20 @@
         # false: append
 
     def add_line(self, id: str, start_id: str, end_id: str, length: str, capacity: str):
+        """
+
+        :param id: 
+        :type id: str
+        :param start_id: 
+        :type start_id: str
+        :param end_id: 
+        :type end_id: str
+        :param length: 
+        :type length: str
+        :param capacity: 
+        :type capacity: str
+
+        """
         id = _string_to_int(id)
         line = self.find_line(id)
         if not line:
@@ -76,6 +124,18 @@
         # Strecken: int(ID) station(Anfang) station(Ende) dec(Länge) int(Kapazität)
 
     def add_train(self, id: str, start_id: str, speed: str, capacity: str):
+        """
+
+        :param id: 
+        :type id: str
+        :param start_id: 
+        :type start_id: str
+        :param speed: 
+        :type speed: str
+        :param capacity: 
+        :type capacity: str
+
+        """
         # Züge: int(ID) station(Startbahnhof)/* dec(Geschwindigkeit) int(Kapazität)
         id = _string_to_int(id)
         train = self.find_train(id)
@@ -89,6 +149,20 @@
                 # assume that this station exist
 
     def add_passenger(self, id: str, start_id: str, end_id: str, size: str, target: str):
+        """
+
+        :param id: 
+        :type id: str
+        :param start_id: 
+        :type start_id: str
+        :param end_id: 
+        :type end_id: str
+        :param size: 
+        :type size: str
+        :param target: 
+        :type target: str
+
+        """
         # Passagiere: int(ID) station(Startbahnhof) station(Zielbahnhof) int(Gruppengröße) int(Ankunftszeit)
         id = _string_to_int(id)
         passenger = self.find_passenger(id)
@@ -98,7 +172,7 @@
                 start_id)), end_station=self.find_station(_string_to_int(end_id)), group_size=int(size), target_time=int(target)))
 
     def from_stdin(self):
-        ''' read input from stdin '''
+        """read input from stdin"""
         lines = sys.stdin.readlines()
         mylines = []  # Declare an empty list.
 
@@ -109,19 +183,28 @@
         return self.parse_lines(mylines)
 
     def if_station_exist():
+        """ """
         pass
 
     def if_line_exist():
+        """ """
         pass
 
     def if_train_exist():
+        """ """
         pass
 
     def if_passenger_exist():
+        """ """
         pass
 
     def to_input_text(self) -> str:
-        ''' return a string of input in format '''
+        """
+
+
+        :rtype: str
+
+        """
         text = "# Bahnhöfe: str(ID) \n [Stations] \n"
         for station in self.Stations:
             text = text + station.to_str_input() + "\n"
@@ -151,7 +234,13 @@
         return text
 
     def to_input_file(self, path: str) -> bool:
-        ''' save input format in local file '''
+        """save input format in local file
+
+        :param path: 
+        :type path: str
+        :rtype: bool
+
+        """
         state = False
         file = open(path, 'w')
         file.write(self.to_input_text())
@@ -160,14 +249,24 @@
         return state
 
     def path_generator(self) -> str:
-        ''' generate a path for local file '''
+        """generate a path for local file
+
+
+        :rtype: str
+
+        """
         filename = "Input-" + \
             time.strftime("%y%m%d-%H%M%S",
                           time.localtime(time.time())) + ".txt"
         return filename
 
     def from_file(self, path: str):
-        ''' load input from local file '''
+        """load input from local file
+
+        :param path: 
+        :type path: str
+
+        """
         mylines = []  # Declare an empty list.
         # Open lorem.txt for reading text.
         with open(path, "rt") as myfile:
@@ -179,7 +278,12 @@
         return self.parse_lines(mylines)
 
     def parse_lines(self, lines: list):
-        ''' this is used in from_input(), from_input_stdin()'''
+        """this is used in from_input(), from_input_stdin()
+
+        :param lines: 
+        :type lines: list
+
+        """
         i = 0
         while(i < len(lines)-1):
             if lines[i] == ("[Stations]"):
@@ -222,7 +326,7 @@
         return self.Stations, self.Lines, self.Trains, self.Passengers
 
     def print_input(self):
-        ''' print information of input '''
+        """print information of input"""
         print("---------------")
         print("| * printing input started ...")
         print(f"| * Stations: [{len(self.Stations)}]")
@@ -252,6 +356,13 @@
 
 # helper methods
 def _string_to_int(string: str) -> int:
+    """
+
+    :param string: 
+    :type string: str
+    :rtype: int
+
+    """
     r = re.findall('\d+', string)
     if (len(r) > 0):
         return int(r[0])
@@ -260,6 +371,13 @@
 
 
 def _string_to_float(string: str) -> float:
+    """
+
+    :param string: 
+    :type string: str
+    :rtype: float
+
+    """
     r = re.findall('\d+', string)
     if (len(r) > 0):
         return float(r[0])
