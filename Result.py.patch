# Patch generated by Pyment v0.4.0dev

--- a/abfahrt\Result.py
+++ b/abfahrt\Result.py
@@ -8,6 +8,7 @@
 
 
 class Result:
+    """ """
     # Format
     # [Train T1]
     # 0 Start S2
@@ -26,7 +27,13 @@
 
     
     def save_train_depart(self, id_train, time, id_line):
-        ''' find the train in trains[], add this action in its history'''
+        """find the train in trains[], add this action in its history
+
+        :param id_train: 
+        :param time: 
+        :param id_line: 
+
+        """
         # print(f"-> enter [save_train_depart], id={id_train}, time={time}, id_line={id_line}")
 
         train = self.find_or_add_train(id_train)    # find the train in list, or add one in list
@@ -38,6 +45,13 @@
         # print("===")
 
     def save_train_start(self, id_train, time, id_station):
+        """
+
+        :param id_train: 
+        :param time: 
+        :param id_station: 
+
+        """
         # print(f"-> enter [save_train_start], id={id_train}, time={time}, id_line={id_station}")
 
         # for i in self.trains:
@@ -57,6 +71,13 @@
         # print("===")
 
     def save_passenger_board(self, id_passenger, time, id_train):
+        """
+
+        :param id_passenger: 
+        :param time: 
+        :param id_train: 
+
+        """
         # print(f"-> enter [save_passenger_board], id={id_passenger}, time={time}, id_line={id_train}")
         p = self.find_or_add_passenger(id_passenger)
         p.add_board(time = time, train_id = id_train)
@@ -68,6 +89,12 @@
         # print("===")
 
     def save_passenger_detrain(self, id_passenger, time):
+        """
+
+        :param id_passenger: 
+        :param time: 
+
+        """
         # print(f"-> enter [save_passenger_detrain], id={id_passenger}, time={time}")
         p = self.find_or_add_passenger(id_passenger)
         p.add_detrain(time = time)
@@ -78,7 +105,13 @@
         # print("===")
     
     def find_or_add_train(self, id_train:int)->Train:
-        '''find the train in the trains[], if not exist, create one'''
+        """find the train in the trains[], if not exist, create one
+
+        :param id_train: 
+        :type id_train: int
+        :rtype: Train
+
+        """
         # print("*-> enter [find_or_add_train]")
 
         # for i in self.trains:
@@ -121,7 +154,13 @@
             return train
 
     def find_or_add_passenger(self, id_passenger:int)->Passenger:
-        '''find the train in the trains[], if not exist, create one, currently cannot deduplicate'''
+        """find the train in the trains[], if not exist, create one, currently cannot deduplicate
+
+        :param id_passenger: 
+        :type id_passenger: int
+        :rtype: Passenger
+
+        """
         # print("*-> enter [find_or_add_passenger]")
         if id_passenger in self.id_passengers:                                      # already exist
             find_result = filter(lambda p: p.id == id_passenger, self.passengers)   # find it
@@ -144,7 +183,12 @@
             return p
 
     def add_passenger(self, passenger:Passenger):
-        '''add a Passanger in list, if already exist(with same id), merge the history'''
+        """add a Passanger in list, if already exist(with same id), merge the history
+
+        :param passenger: 
+        :type passenger: Passenger
+
+        """
         '''also save the id in a Set, for easily to check if some exist'''
         '''if you need to add a P only with id, please use find_or_add_passenger'''
         if passenger.id in self.id_passengers:          # already exist
@@ -159,6 +203,12 @@
             self.passengers.sort(key=lambda x : x.id)
 
     def add_train(self,train:Train):
+        """
+
+        :param train: 
+        :type train: Train
+
+        """
         if train.id in self.id_trains:
             self.find_or_add_train(train.id).merge(train)
         else:
@@ -169,21 +219,41 @@
             self.trains.sort(key=lambda x : x.id)
 
     def passengers_add_from_input(self, input:Input):
-        '''from input add all passengers'''
+        """from input add all passengers
+
+        :param input: 
+        :type input: Input
+
+        """
         for passenger in input.Passengers:
             self.add_passenger(passenger)
         
     def passengers_read_from_input(self, input:Input):
-        '''directly read all passengers from input.passengers'''
+        """directly read all passengers from input.passengers
+
+        :param input: 
+        :type input: Input
+
+        """
         self.passengers = input.Passengers
 
     def train_add_from_input(self, input:Input):
-        '''from input add all passengers'''
+        """from input add all passengers
+
+        :param input: 
+        :type input: Input
+
+        """
         for train in input.Trains:
             self.add_train(train)
         
     def train_read_from_input(self, input:Input):
-        '''directly read all passengers from input.passengers'''
+        """directly read all passengers from input.passengers
+
+        :param input: 
+        :type input: Input
+
+        """
         self.trains = input.Trains
 
 
@@ -191,6 +261,7 @@
 #%% saving methods
 
     def to_output_text(self):
+        """ """
         result = ""
         for t in self.trains:
             result += f"[Train:{t.get_id_str()}]\n"
@@ -205,7 +276,7 @@
         return result
 
     def to_file_same(self):
-        ''' save output file in SAME file output '''
+        """save output file in SAME file output"""
         path = './output.txt'
         state = False
         file = open(path, 'w')  
@@ -215,9 +286,12 @@
         return state
 
     def to_file(self, folder = "result"):
-        ''' save output format in local file 
+        """save output format in local file
         parameter: folder: the folder to save this file, default is "result"
-        '''
+
+        :param folder:  (Default value = "result")
+
+        """
         dir_name = str(folder)
         path = self.path_generator(folder = dir_name)
         state = False
@@ -232,7 +306,12 @@
         return state
 
     def path_generator(self, folder = "result") -> str:
-        ''' generate a path for local file '''
+        """generate a path for local file
+
+        :param folder:  (Default value = "result")
+        :rtype: str
+
+        """
         dir_name = str(folder)
         path = "./" + dir_name + "/Output"
         path = path +"-"+ time.strftime("%y%m%d-%H%M%S",time.localtime(time.time()))
